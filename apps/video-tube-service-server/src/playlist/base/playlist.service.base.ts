/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Playlist as PrismaPlaylist,
  Video as PrismaVideo,
  User as PrismaUser,
} from "@prisma/client";

export class PlaylistServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PlaylistCountArgs, "select">): Promise<number> {
    return this.prisma.playlist.count(args);
  }

  async playlists<T extends Prisma.PlaylistFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PlaylistFindManyArgs>
  ): Promise<PrismaPlaylist[]> {
    return this.prisma.playlist.findMany<Prisma.PlaylistFindManyArgs>(args);
  }
  async playlist<T extends Prisma.PlaylistFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PlaylistFindUniqueArgs>
  ): Promise<PrismaPlaylist | null> {
    return this.prisma.playlist.findUnique(args);
  }
  async createPlaylist<T extends Prisma.PlaylistCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PlaylistCreateArgs>
  ): Promise<PrismaPlaylist> {
    return this.prisma.playlist.create<T>(args);
  }
  async updatePlaylist<T extends Prisma.PlaylistUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PlaylistUpdateArgs>
  ): Promise<PrismaPlaylist> {
    return this.prisma.playlist.update<T>(args);
  }
  async deletePlaylist<T extends Prisma.PlaylistDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PlaylistDeleteArgs>
  ): Promise<PrismaPlaylist> {
    return this.prisma.playlist.delete(args);
  }

  async findVideos(
    parentId: string,
    args: Prisma.VideoFindManyArgs
  ): Promise<PrismaVideo[]> {
    return this.prisma.playlist
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .videos(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.playlist
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
